version: 2.1
orbs:
  aws-cli: circleci/aws-cli@4.2.3
  ruby: circleci/ruby@2.2.1
  ansible-playbook: orbss/ansible-playbook@0.0.5
  aws-cloudformation: orbss/aws-cloudformation@0.1.6
  python: circleci/python@2.0.3

jobs:
  cfn-lint:
    executor: python/default
    steps:
      - checkout
      - run: pip install cfn-lint
      - run:
          name: Run cfn-lint for CloudFormation
          command: cfn-lint -i W3002 -t cloudformation/*.yml

  execute-cloudformation:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      - run:
          name: Install required utilities
          command: yum install -y tar gzip
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
      - run:
          name: Deploy to AWS from templates
          command: |
            aws cloudformation deploy --template-file cloudformation/4_RDS_S3_ALB.yml --stack-name 'Lec13-RDS-S3'
      - run:
          name: Get ELB DNS_NAME from CloudFormation
          command: |
            DNS_NAME=$(aws cloudformation describe-stacks \
              --stack-name "Lec13-RDS-S3" \
              --query "Stacks[0].Outputs[?OutputKey=='LoadBalancerDNS'].OutputValue" \
              --output text \
              --region ap-northeast-1)
            echo "${DNS_NAME}" > dns_name.txt
      - persist_to_workspace:
          root: .
          paths:
            - dns_name.txt

  execute-ansible:
    docker:
      - image: cimg/python:3.8
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load DNS_NAME from workspace
          command: |
            DNS_NAME=$(cat /tmp/workspace/dns_name.txt)
            echo "export DNS_NAME=${DNS_NAME}" >> $BASH_ENV
      - run:
          name: Remove old entry from known_hosts
          command: |
            ssh-keygen -R 18.180.2.113 -f ~/.ssh/known_hosts || true
          #  ssh-keyscan 18.180.2.113 >> ~/.ssh/known_hosts
      - add_ssh_keys:
          fingerprints:
            - $FINGER_PRINT
      - run:
          name: Install Ansible
          command: pip install ansible
      - run:
          name: Execute Ansible Playbook
          command: |
            ansible-playbook -i ansible/inventory ansible/playbook.yml --extra-vars "alb_dns=${DNS_NAME}"

  execute-serverspec:
    executor: ruby/default
    steps:
      - checkout
      - ruby/install:
          version: 3.2.3
      - ruby/install-deps:
          app-dir: serverspec
      - run:
          name: Execute serverspec
          command: |
            cd serverspec
            TARGET_HOST=18.180.2.113 bundle exec rspec
          
workflows:
  version: 2
  lec13-workflow:
    jobs:
      - cfn-lint
      - execute-cloudformation:
          requires:
            - cfn-lint
      - execute-ansible:
          requires:
            - execute-cloudformation
      - execute-serverspec:
          requires:
            - execute-ansible
